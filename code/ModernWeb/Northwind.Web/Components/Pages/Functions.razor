@page "/functions"
@code
{
  private string title = "Functions";

  private string collapsedTimesTable = string.Empty;
  private string collapsedCalculateTax = string.Empty;
  private string collapsedFactorial = string.Empty;
  private string collapsedFibonacci = string.Empty;

  [Parameter]
  public int? TimesTableNumberInput { get; set; }

  [Parameter]
  public decimal? Amount { get; set; }
  [Parameter]
  public string? RegionCode { get; set; }
  public decimal? TaxToPay { get; set; }

  [Parameter]
  public int? FactorialNumber { get; set; }
  public int? FactorialResult { get; set; }
  public Exception? FactorialException { get; set; }

  [Parameter]
  public int? FibonacciNumber { get; set; }
  public int? FibonacciResult { get; set; }

  protected override void OnInitialized()
  {
    TaxToPay = CalculateTax(amount: Amount ?? 0M,
      twoLetterRegionCode: RegionCode);

    // Factorial
    try
    {
      FactorialResult = Factorial(FactorialNumber ?? 1);
    }
    catch (Exception ex)
    {
      FactorialException = ex;
    }

    // Fibonacci
    FibonacciResult = FibImperative(term: FibonacciNumber ?? 1);

    collapsedTimesTable = TimesTableNumberInput.HasValue ? string.Empty : "collapse";
    collapsedCalculateTax = Amount.HasValue ? string.Empty : "collapse";
    collapsedFactorial = FactorialNumber.HasValue ? string.Empty : "collapse";
    collapsedFibonacci = FibonacciNumber.HasValue ? string.Empty : "collapse";

    static decimal CalculateTax(
        decimal amount, string? twoLetterRegionCode)
    {
      decimal rate = 0.0M;

      // since we are matching string values a switch
      // statement is easier than a switch expression

      switch (twoLetterRegionCode)
      {
        case "CH": // Switzerland
          rate = 0.08M;
          break;
        case "DK": // Denmark
        case "NO": // Norway
          rate = 0.25M;
          break;
        case "GB": // United Kingdom
        case "FR": // France
          rate = 0.2M;
          break;
        case "HU": // Hungary
          rate = 0.27M;
          break;
        case "OR": // Oregon
        case "AK": // Alaska
        case "MT": // Montana
          rate = 0.0M;
          break;
        case "ND": // North Dakota
        case "WI": // Wisconsin
        case "ME": // Maine
        case "VA": // Virginia
          rate = 0.05M;
          break;
        case "CA": // California
          rate = 0.0825M;
          break;
        default: // most US states
          rate = 0.06M;
          break;
      }

      return amount * rate;
    }

    static int Factorial(int number)
    {
      if (number < 0)
      {
        throw new ArgumentException(
          message: "The factorial function is defined for non-negative integers only.",
          paramName: "number");
      }
      else if (number == 0)
      {
        return 1;
      }
      else
      {
        checked // for overflow
        {
          return number * Factorial(number - 1);
        }
      }
    }

    static int FibImperative(int term)
    {
      if (term == 1)
      {
        return 0;
      }
      else if (term == 2)
      {
        return 1;
      }
      else
      {
        return FibImperative(term - 1) + FibImperative(term - 2);
      }
    }

  }
}
<div class="row">
  <h1 class="display-2">@title</h1>
  <div>
    <h2>Exercise 13.2 – Build web pages for functions</h2>
    <div>Provide a web user interface to output times tables, calculate tax, and generate factorials and the Fibonacci sequence.</div>
  </div>
  <div class="accordion" id="accordionFunctions">
    <div class="accordion-item">
      <h2 class="accordion-header" id="headerTimesTable">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTimesTable" aria-expanded="true" aria-controls="collapseTimesTable">
          Times Table
        </button>
      </h2>
      <div id="collapseTimesTable" class="accordion-collapse @collapsedTimesTable" aria-labelledby="headingTimesTable" data-bs-parent="#accordionTimesTable">
        <div class="accordion-body">
          <form>
            <div class="mb-3">
              <label for="timesTableNumberInput" class="form-label">Number</label>
              <input type="number" class="form-control" id="timesTableNumberInput" name="timesTableNumberInput" aria-describedby="timesTableNumberHelp">
              <div id="timesTableNumberHelp" class="form-text">Enter an integer between 1 and 100.</div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
          @if (TimesTableNumberInput.HasValue)
          {
            <div class="card" style="width: 18rem;">
              <div class="card-body">
                <h5 class="card-title">@TimesTableNumberInput times table</h5>
                @for (int i = 1; i <= 12; i++)
                {
                  <div>
                    @i x @TimesTableNumberInput = @(i * TimesTableNumberInput)
                  </div>
                }
              </div>

            </div>
          }
        </div>
      </div>
    </div>

    <div class="accordion-item">
      <h2 class="accordion-header" id="headerCalculateTax">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseCalculateTax" aria-expanded="true" aria-controls="collapseCalculateTax">
          Calculate Tax
        </button>
      </h2>
      <div id="collapseCalculateTax" class="accordion-collapse @collapsedCalculateTax" aria-labelledby="headingCalculateTax" data-bs-parent="#accordionCalculateTax">
        <div class="accordion-body">
          <form>
            <div class="mb-3">
              <label for="calculateTaxAmountInput" class="form-label">Amount</label>
              <input type="number" class="form-control" id="calculateTaxAmountInput" name="calculateTaxAmountInput" aria-describedby="calculateTaxAmountInputHelp">
              <div id="calculateTaxAmountInputHelp" class="form-text">Enter a monetary value.</div>
            </div>
            <div class="mb-3">
              <label for="calculateTaxRegionCodeInput" class="form-label">Region</label>
              <select class="form-control" id="calculateTaxRegionCodeInput" name="calculateTaxRegionCodeInput" aria-describedby="calculateTaxRegionCodeInputHelp">
                <optgroup label="Europe">
                  <option value="DK">Denmark</option>
                  <option value="FR">France</option>
                  <option value="HU">Hungary</option>
                  <option value="NO">Norway</option>
                  <option value="CH">Switzerland</option>
                  <option value="GB">United Kingdom</option>
                </optgroup>
                <optgroup label="United States">
                  <option value="AK">Alaska</option>
                  <option value="OR">Oregon</option>
                  <option value="MT">Montana</option>
                  <option value="ND">North Dakota</option>
                  <option value="WI">Wisconsin</option>
                  <option value="ME">Maine</option>
                  <option value="VA">Virginia</option>
                  <option value="CA">California</option>
                  <option value="OT">Other</option>
                </optgroup>
              </select>
              <div id="calculateTaxRegionCodeInputHelp" class="form-text">Select a European or US state.</div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
          @if (Amount.HasValue)
          {
            <div class="card" style="width: 18rem;">
              <div class="card-body">
                <h5 class="card-title">You must pay @TaxToPay in tax.</h5>
              </div>

            </div>
          }
        </div>
      </div>
    </div>

    <div class="accordion-item">
      <h2 class="accordion-header" id="headerFactorials">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFactorials" aria-expanded="true" aria-controls="collapseFactorials">
          Factorials
        </button>
      </h2>
      <div id="collapseFactorials" class="accordion-collapse @collapsedFactorial" aria-labelledby="headingFactorials" data-bs-parent="#accordionFactorials">
        <div class="accordion-body">
          <div>
            <form>
              <div class="mb-3">
                <label for="factorialNumberInput" class="form-label">Number</label>
                <input type="number" class="form-control" id="factorialNumberInput" name="factorialNumberInput" aria-describedby="factorialNumberHelp">
                <div id="factorialNumberHelp" class="form-text">Enter an integer between 1 and 12.</div>
              </div>
              <button type="submit" class="btn btn-primary">Submit</button>
            </form>
            @if (FactorialNumber.HasValue)
            {
              <div class="card" style="width: 18rem;">
                <div class="card-body">
                  <h5 class="card-title">@(FactorialNumber)!</h5>
                  <div>
                    @(FactorialNumber)! = @(FactorialResult is null ? "null" : FactorialResult.Value.ToString("N0"))
                  </div>
                </div>

              </div>
            }
            @if (FactorialException is not null)
            {
              <div class="card" style="width: 18rem;">
                <div class="card-body">
                  <h5 class="card-title">Exception</h5>
                  <div>
                    @FactorialException.Message
                  </div>
                </div>

              </div>
            }
          </div>
        </div>
      </div>
    </div>

    <div class="accordion-item">
      <h2 class="accordion-header" id="headerFibonacciSequence">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFibonacciSequence" aria-expanded="true" aria-controls="collapseFibonacciSequence">
          Fibonacci sequence
        </button>
      </h2>
      <div id="collapseFibonacciSequence" class="accordion-collapse @collapsedFibonacci" aria-labelledby="headingFibonacciSequence" data-bs-parent="#accordionCustomers">
        <div class="accordion-body">
          <div>
            <form>
              <div class="mb-3">
                <label for="fibonacciNumberInput" class="form-label">Term</label>
                <input type="number" class="form-control" id="fibonacciNumberInput" name="fibonacciNumberInput" aria-describedby="fibonacciNumberHelp">
                <div id="fibonacciNumberHelp" class="form-text">Enter an integer between 1 and 40.</div>
              </div>
              <button type="submit" class="btn btn-primary">Submit</button>
            </form>
            @if (FibonacciNumber.HasValue)
            {
              <div class="card" style="width: 18rem;">
                <div class="card-body">
                  <h5 class="card-title">Fibonacci term @FibonacciNumber</h5>
                  <div>
                    Term @FibonacciNumber of the fibonacci sequence = @(FibonacciResult is null ? "null" : FibonacciResult.Value.ToString("N0"))
                  </div>
                </div>

              </div>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</div>